from html.parser import HTMLParser

allowed_elements = {
    "a",
    "abbr",
    "acronym",
    "address",
    "animate",
    "animateColor",
    "animateMotion",
    "animateTransform",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "big",
    "blockquote",
    "br",
    "button",
    "canvas",
    "caption",
    "center",
    "circle",
    "cite",
    "clipPath",
    "code",
    "col",
    "colgroup",
    "command",
    "datagrid",
    "datalist",
    "dd",
    "defs",
    "del",
    "desc",
    "details",
    "dfn",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "ellipse",
    "em",
    "event-source",
    "fieldset",
    "figcaption",
    "figure",
    "font",
    "font-face",
    "font-face-name",
    "font-face-src",
    "footer",
    "form",
    "g",
    "glyph",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hkern",
    "hr",
    "i",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "line",
    "linearGradient",
    "m",
    "maction",
    "map",
    "marker",
    "math",
    "menu",
    "merror",
    "metadata",
    "meter",
    "mfrac",
    "mi",
    "missing-glyph",
    "mmultiscripts",
    "mn",
    "mo",
    "mover",
    "mpadded",
    "mpath",
    "mphantom",
    "mprescripts",
    "mroot",
    "mrow",
    "mspace",
    "msqrt",
    "mstyle",
    "msub",
    "msubsup",
    "msup",
    "mtable",
    "mtd",
    "mtext",
    "mtr",
    "multicol",
    "munder",
    "munderover",
    "nav",
    "nextid",
    "none",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "path",
    "polygon",
    "polyline",
    "pre",
    "progress",
    "q",
    "radialGradient",
    "rect",
    "s",
    "samp",
    "section",
    "select",
    "set",
    "small",
    "sound",
    "source",
    "spacer",
    "span",
    "stop",
    "strike",
    "strong",
    "sub",
    "sup",
    "svg",
    "switch",
    "table",
    "tbody",
    "td",
    "text",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "tspan",
    "tt",
    "u",
    "ul",
    "use",
    "var",
    "video",
}


class TestHTMLParser(HTMLParser):
    def __init__(self, *args, **kwargs):
        HTMLParser.__init__(self, *args, **kwargs)

        self.elements = set()

    def handle_starttag(self, tag, attrs):
        self.elements.add(tag)

    def handle_endtag(self, tag):
        self.elements.add(tag)


def is_html(text):
    """Check if a text is html formatted.

    Args:
        text: Text to check.

    Returns:
        bool: True if it's HTML false otherwise.
    """
    parser = TestHTMLParser()
    parser.feed(text)
    intersection = parser.elements.intersection(allowed_elements)
    return len(intersection) > 0
